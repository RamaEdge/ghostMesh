---
globs: dashboard/*.py,*.py
description: Streamlit dashboard UI patterns and standards
---

# Streamlit Dashboard Standards

## Project Structure
The dashboard should be organized in [dashboard/](mdc:dashboard/) with:
- `app.py` - Main Streamlit application
- `components/` - Reusable UI components
- `utils/` - Helper functions and MQTT client
- `config.py` - Configuration management

## UI Layout Pattern
```python
import streamlit as st
import plotly.graph_objects as go
from datetime import datetime, timedelta

# Page configuration
st.set_page_config(
    page_title="GhostMesh Dashboard",
    page_icon="ðŸ‘»",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Main layout
def main():
    st.title("ðŸ‘» GhostMesh - Edge AI Security Copilot")
    
    # Sidebar for controls
    with st.sidebar:
        st.header("Controls")
        # Control buttons and settings
    
    # Main content area
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Telemetry charts
        render_telemetry_charts()
    
    with col2:
        # Alerts panel
        render_alerts_panel()
    
    # Bottom section
    st.subheader("Recent Actions")
    render_audit_log()
```

## Real-time Data Updates
```python
import time
from streamlit.runtime.scriptrunner import add_script_run_ctx

# Use session state for data persistence
if 'telemetry_data' not in st.session_state:
    st.session_state.telemetry_data = {}
if 'alerts' not in st.session_state:
    st.session_state.alerts = []

# Auto-refresh every 2 seconds
if st.checkbox("Auto-refresh", value=True):
    time.sleep(2)
    st.rerun()
```

## Chart Components
```python
def render_telemetry_chart(asset_id: str, signal: str, data: list):
    if not data:
        st.info(f"No data for {asset_id} - {signal}")
        return
    
    # Create time series chart
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=[d['ts'] for d in data],
        y=[d['value'] for d in data],
        mode='lines+markers',
        name=f"{asset_id} - {signal}",
        line=dict(color='#1f77b4')
    ))
    
    fig.update_layout(
        title=f"{asset_id} - {signal}",
        xaxis_title="Time",
        yaxis_title="Value",
        height=300
    )
    
    st.plotly_chart(fig, use_container_width=True)
```

## Alert Display
```python
def render_alert_card(alert: dict):
    severity_colors = {
        "low": "ðŸŸ¡",
        "medium": "ðŸŸ ", 
        "high": "ðŸ”´"
    }
    
    with st.container():
        col1, col2, col3 = st.columns([1, 3, 1])
        
        with col1:
            st.markdown(f"## {severity_colors.get(alert['severity'], 'âšª')}")
        
        with col2:
            st.markdown(f"**{alert['assetId']}** - {alert['signal']}")
            st.markdown(f"*{alert['reason']}*")
            st.markdown(f"Current: {alert['current']}")
        
        with col3:
            if st.button("Isolate", key=f"isolate_{alert['alertId']}"):
                send_control_command(alert['assetId'], "isolate", alert['alertId'])
```

## Control Actions
```python
def send_control_command(asset_id: str, command: str, ref_alert_id: str = None):
    topic = f"control/{asset_id}/{command}"
    payload = {
        "assetId": asset_id,
        "command": command,
        "reason": "operator_action",
        "refAlertId": ref_alert_id,
        "ts": datetime.utcnow().isoformat() + "Z"
    }
    
    # Publish to MQTT
    mqtt_client.publish(topic, json.dumps(payload), qos=1)
    
    # Show confirmation
    st.success(f"Sent {command} command to {asset_id}")
```

## Performance Optimization
- Limit chart data to last 500 points
- Use `st.empty()` for dynamic content updates
- Implement proper error handling for MQTT disconnections
- Cache expensive computations
- Use `st.cache_data` for static data

## Theming
```python
# Custom CSS for GhostMesh branding
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
    }
    
    .alert-card {
        border-left: 4px solid #ff6b6b;
        padding: 1rem;
        margin: 0.5rem 0;
        background-color: #f8f9fa;
        border-radius: 5px;
    }
</style>
""", unsafe_allow_html=True)
```