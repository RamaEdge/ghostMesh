# GhostMesh Container Compose Configuration
# Edge AI Security Copilot Services
# Compatible with both Docker and Podman
# 
# Documentation: docs/Project_README.md
# MQTT Configuration: docs/MQTT_Configuration.md
# Environment: Copy env.example to .env and customize

services:
  # Mock OPC UA Server for development and testing
  mock-opcua:
    build: ./mock-opcua
    container_name: ghostmesh-mock-opcua
    ports:
      - "4840:4840"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    networks:
      - ghostmesh-network

  mosquitto:
    image: eclipse-mosquitto:2
    container_name: ghostmesh-mosquitto
    ports:
      - "1883:1883"
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mosquitto/passwd:/mosquitto/config/passwd
      - ./mosquitto/acl.conf:/mosquitto/config/acl.conf
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    environment:
      - MOSQUITTO_USERNAME=mosquitto
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    networks:
      - ghostmesh-network

  # OPC UA to MQTT Gateway - Implemented in THE-60
  opcua2mqtt:
    build: ./opcua2mqtt
    container_name: ghostmesh-gateway
    depends_on:
      mosquitto:
        condition: service_started
      mock-opcua:
        condition: service_started
    environment:
      - MQTT_HOST=${MQTT_HOST:-mosquitto}
      - MQTT_PORT=${MQTT_PORT:-1883}
      - MQTT_USERNAME=${MQTT_USERNAME_GATEWAY:-gateway}
      - MQTT_PASSWORD=${MQTT_PASSWORD_GATEWAY:-gatewaypass}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    networks:
      - ghostmesh-network

  # Anomaly Detector - Implemented in THE-62
  anomaly:
    build: ./anomaly
    container_name: ghostmesh-detector
    depends_on:
      mosquitto:
        condition: service_started
    environment:
      - MQTT_HOST=${MQTT_HOST:-mosquitto}
      - MQTT_PORT=${MQTT_PORT:-1883}
      - MQTT_USERNAME=${MQTT_USERNAME_IOT:-iot}
      - MQTT_PASSWORD=${MQTT_PASSWORD_IOT:-iotpass}
      - MQTT_QOS=1
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    networks:
      - ghostmesh-network

  # Policy Engine - Implemented in THE-63
  policy:
    build: ./policy
    container_name: ghostmesh-policy
    depends_on:
      mosquitto:
        condition: service_started
    environment:
      - MQTT_HOST=${MQTT_HOST:-mosquitto}
      - MQTT_PORT=${MQTT_PORT:-1883}
      - MQTT_USERNAME=${MQTT_USERNAME_IOT:-iot}
      - MQTT_PASSWORD=${MQTT_PASSWORD_IOT:-iotpass}
      - MQTT_QOS=1
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    networks:
      - ghostmesh-network

  # AI Explainer Service - Implemented in THE-67 (LLM Integration)
  explainer:
    build: ./explainer
    container_name: ghostmesh-explainer
    depends_on:
      mosquitto:
        condition: service_started
      llm-server:
        condition: service_started
    environment:
      - MQTT_HOST=${MQTT_HOST:-mosquitto}
      - MQTT_PORT=${MQTT_PORT:-1883}
      - MQTT_USERNAME=${MQTT_USERNAME_EXPLAINER:-explainer}
      - MQTT_PASSWORD=${MQTT_PASSWORD_EXPLAINER:-explainerpass}
      - MQTT_QOS=1
      - LLM_SERVER_URL=${LLM_SERVER_URL:-http://llm-server:8080}
      - DEFAULT_USER_TYPE=${DEFAULT_USER_TYPE:-hybrid}
      - EXPLANATION_TIMEOUT=${EXPLANATION_TIMEOUT:-10}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    networks:
      - ghostmesh-network

  # LLM Server - Implemented in THE-67
  llm-server:
    build: ./llm-server
    container_name: ghostmesh-llm-server
    ports:
      - "8080:8080"
    volumes:
      - llm_models:/models
    environment:
      - MODEL_PATH=${MODEL_PATH:-/models/tinyllama-1.1b-chat.gguf}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    networks:
      - ghostmesh-network


  # MQTT API Backend Service - Implemented in THE-80
  mqtt-api:
    build: ./mqtt-api
    container_name: ghostmesh-mqtt-api
    ports:
      - "8000:8000"
    depends_on:
      mosquitto:
        condition: service_started
    environment:
      - MQTT_BROKER_HOST=${MQTT_HOST:-mosquitto}
      - MQTT_BROKER_PORT=${MQTT_PORT:-1883}
      - MQTT_USERNAME=${MQTT_USERNAME_API:-api}
      - MQTT_PASSWORD=${MQTT_PASSWORD_API:-api_password}
      - MQTT_KEEPALIVE=${MQTT_KEEPALIVE:-60}
      - MQTT_CLEAN_SESSION=${MQTT_CLEAN_SESSION:-true}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
      - API_WORKERS=${API_WORKERS:-1}
      - API_RELOAD=${API_RELOAD:-false}
      - MAX_HISTORY_SIZE=${MAX_HISTORY_SIZE:-1000}
      - MESSAGE_RETENTION_HOURS=${MESSAGE_RETENTION_HOURS:-24}
      - WS_HEARTBEAT_INTERVAL=${WS_HEARTBEAT_INTERVAL:-30}
      - WS_MAX_CONNECTIONS=${WS_MAX_CONNECTIONS:-100}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - API_KEY_REQUIRED=${API_KEY_REQUIRED:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30}
      - HEALTH_CHECK_TIMEOUT=${HEALTH_CHECK_TIMEOUT:-10}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    networks:
      - ghostmesh-network

  # React Dashboard - Modern UI for GhostMesh
  dashboard-ui:
    image: ghostmesh-dashboard-lovable:latest
    container_name: ghostmesh-dashboard-ui
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - ghostmesh-network

  # Anomaly Injector Service - Periodic testing
  anomaly-injector:
    build:
      context: ./anomaly-injector
      dockerfile: Dockerfile
    container_name: ghostmesh-anomaly-injector
    depends_on:
      mosquitto:
        condition: service_healthy
    environment:
      - MQTT_HOST=mosquitto
      - MQTT_PORT=1883
      - MQTT_USERNAME=iot
      - MQTT_PASSWORD=iotpass
      - INJECTION_INTERVAL=60
    restart: unless-stopped
    networks:
      - ghostmesh-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

volumes:
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  llm_models:
    driver: local

networks:
  ghostmesh-network:
    driver: bridge
